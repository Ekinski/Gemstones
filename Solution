using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the gemstones function below.
    static int gemstones(string[] arr) {
        int answer = 0;
        char[] chars = arr[0].ToCharArray();
        for( int a = 0; a < arr.Length; a++){
            if (chars.Length > arr[a].Length){
                chars = arr[a].ToCharArray().Distinct().ToArray();
            } else {
                continue;
            }   
        }
        for ( int b = 0; b < chars.Length; b++){
            for ( int c = 0; c < arr.Length; c++){
                if (arr[c].Contains(chars[b])){
                    if (c == arr.Length -1){
                        answer++;
                    }
                    continue;
                } else {
                    break;
                }
            }
        }
        return answer;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        string[] arr = new string [n];

        for (int i = 0; i < n; i++) {
            string arrItem = Console.ReadLine();
            arr[i] = arrItem;
        }

        int result = gemstones(arr);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
